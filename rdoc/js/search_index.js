var search_data = {"index":{"searchIndex":["addressable","uri","array","bignum","class","date","datetime","falseclass","file","fixnum","float","gem","platform","gibbler","array","baddigest","complex","datetime","digest","instancemethods","error","file","hash","history","nil","nohistory","norevert","object","range","string","time","version","hash","matchdata","module","nilclass","object","openstruct","proc","range","regexp","string","symbol","tempfile","time","trueclass","uri","generic","==()","===()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler()","__gibbler_revert!()","__gibbler_revert!()","__gibbler_revert!()","__gibbler_revert!()","base()","base36()","changed?()","clear()","commit()","debug?()","digest()","digest()","digest()","digest_cache()","digest_fields()","digest_type()","find_long()","freeze()","gibbled?()","gibbler()","gibbler()","gibbler_commit()","gibbler_debug()","gibbler_debug()","gibbler_fields()","gibbler_fields()","gibbler_fields()","gibbler_fields()","gibbler_find_long()","gibbler_history()","gibbler_history?()","gibbler_object()","gibbler_revert!()","gibbler_stamp()","gibbler_valid?()","history()","history?()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","included()","inherited()","load_config()","message()","message()","message()","mutex()","new()","new()","object()","revert!()","short()","shorten()","shorter()","stamp()","tiny()","to_i()","to_s()","to_s()","valid?()","license","readme"],"longSearchIndex":["addressable","addressable::uri","array","bignum","class","date","datetime","falseclass","file","fixnum","float","gem","gem::platform","gibbler","gibbler::array","gibbler::baddigest","gibbler::complex","gibbler::datetime","gibbler::digest","gibbler::digest::instancemethods","gibbler::error","gibbler::file","gibbler::hash","gibbler::history","gibbler::nil","gibbler::nohistory","gibbler::norevert","gibbler::object","gibbler::range","gibbler::string","gibbler::time","gibbler::version","hash","matchdata","module","nilclass","object","openstruct","proc","range","regexp","string","symbol","tempfile","time","trueclass","uri","uri::generic","gibbler::digest::instancemethods#==()","gibbler::digest::instancemethods#===()","gibbler::array#__gibbler()","gibbler::complex#__gibbler()","gibbler::datetime#__gibbler()","gibbler::file#__gibbler()","gibbler::hash#__gibbler()","gibbler::nil#__gibbler()","gibbler::object#__gibbler()","gibbler::range#__gibbler()","gibbler::string#__gibbler()","gibbler::time#__gibbler()","array#__gibbler_revert!()","gibbler::complex#__gibbler_revert!()","hash#__gibbler_revert!()","string#__gibbler_revert!()","gibbler::digest::instancemethods#base()","gibbler::digest::instancemethods#base36()","gibbler::object#changed?()","string#clear()","gibbler::history#commit()","gibbler::debug?()","gibbler#digest()","gibbler::digest()","gibbler::object#digest()","gibbler::object#digest_cache()","gibbler::object#digest_fields()","gibbler#digest_type()","gibbler::history#find_long()","gibbler::object#freeze()","gibbler::object#gibbled?()","gibbler::complex::gibbler()","gibbler::object#gibbler()","gibbler::history#gibbler_commit()","gibbler::gibbler_debug()","gibbler::object#gibbler_debug()","gibbler::complex#gibbler_fields()","gibbler::complex::gibbler_fields()","gibbler::object::gibbler_fields()","gibbler::object#gibbler_fields()","gibbler::history#gibbler_find_long()","gibbler::history#gibbler_history()","gibbler::history#gibbler_history?()","gibbler::history#gibbler_object()","gibbler::history#gibbler_revert!()","gibbler::history#gibbler_stamp()","gibbler::history#gibbler_valid?()","gibbler::history#history()","gibbler::history#history?()","gibbler::included()","gibbler::array::included()","gibbler::complex::included()","gibbler::datetime::included()","gibbler::file::included()","gibbler::hash::included()","gibbler::nil::included()","gibbler::object::included()","gibbler::range::included()","gibbler::string::included()","gibbler::time::included()","gibbler::complex::inherited()","gibbler::version::load_config()","gibbler::baddigest#message()","gibbler::nohistory#message()","gibbler::norevert#message()","gibbler::history::mutex()","gibbler::new()","gibbler::error::new()","gibbler::history#object()","gibbler::history#revert!()","gibbler::digest::instancemethods#short()","gibbler::digest::instancemethods#shorten()","gibbler::digest::instancemethods#shorter()","gibbler::history#stamp()","gibbler::digest::instancemethods#tiny()","gibbler::digest::instancemethods#to_i()","gibbler::digest::instancemethods#to_s()","gibbler::version::to_s()","gibbler::history#valid?()","",""],"info":[["Addressable","","Addressable.html","",""],["Addressable::URI","","Addressable/URI.html","",""],["Array","","Array.html","",""],["Bignum","","Bignum.html","",""],["Class","","Class.html","",""],["Date","","Date.html","",""],["DateTime","","DateTime.html","",""],["FalseClass","","FalseClass.html","",""],["File","","File.html","",""],["Fixnum","","Fixnum.html","",""],["Float","","Float.html","",""],["Gem","","Gem.html","","<p>Bundler calls freeze on an instance of Gem::Platform\n"],["Gem::Platform","","Gem/Platform.html","",""],["Gibbler","","Gibbler.html","","<p>Gibbler\n<p>\"Hola, Tanneritos\"\n"],["Gibbler::Array","","Gibbler/Array.html","","<p>Creates a digest based on:\n<p>parse each element into an Array of digests like:\n<code>CLASS:INDEX:VALUE.__gibbler</code> ...\n"],["Gibbler::BadDigest","","Gibbler/BadDigest.html","",""],["Gibbler::Complex","","Gibbler/Complex.html","","<p>Creates a digest based on:\n<p>An Array of instance variable names or method names and values in the\nformat: ...\n"],["Gibbler::DateTime","","Gibbler/DateTime.html","","<p>Creates a digest based on: <code>CLASS:LENGTH:DATETIME</code>.  Dates are\ncalculated based on the equivalent datetime ...\n"],["Gibbler::Digest","","Gibbler/Digest.html","","<p>Gibbler::Digest\n<p>A tiny subclass of String which adds a few digest related convenience\nmethods.\n"],["Gibbler::Digest::InstanceMethods","","Gibbler/Digest/InstanceMethods.html","",""],["Gibbler::Error","","Gibbler/Error.html","",""],["Gibbler::File","","Gibbler/File.html","","<p>Creates a digest based on: <code>CLASS:PATHLENGTH:PATH</code> where\nPATHLENGTH is the length of the PATH string.  ...\n"],["Gibbler::Hash","","Gibbler/Hash.html","","<p>Creates a digest based on:\n<p>parse each key, value pair into an Array containing keys:\n<code>CLASS:KEY:VALUE</code> ...\n"],["Gibbler::History","","Gibbler/History.html","",""],["Gibbler::Nil","","Gibbler/Nil.html","","<p>Creates a digest based on: <code>CLASS:\\0</code>\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">nil</span>.<span class=\"ruby-identifier\">gibbler</span>      <span class=\"ruby-comment\"># =&gt; 06fdf26b</span>\n</pre>\n"],["Gibbler::NoHistory","","Gibbler/NoHistory.html","",""],["Gibbler::NoRevert","","Gibbler/NoRevert.html","",""],["Gibbler::Object","","Gibbler/Object.html","",""],["Gibbler::Range","","Gibbler/Range.html","","<p>Creates a digest based on: <code>CLASS:EXCLUDE?:FIRST:LAST</code> where\nEXCLUDE? is a boolean value whether the Range ...\n"],["Gibbler::String","","Gibbler/String.html","","<p>Creates a digest based on: <code>CLASS:LENGTH:VALUE</code>.  This method\ncan be used for any class where the <code>to_s</code> ...\n"],["Gibbler::Time","","Gibbler/Time.html","","<p>Creates a digest based on: <code>CLASS:LENGTH:TIME</code>.  Times are\ncalculated based on the equivalent time in  ...\n"],["Gibbler::VERSION","","Gibbler/VERSION.html","",""],["Hash","","Hash.html","",""],["MatchData","","MatchData.html","",""],["Module","","Module.html","",""],["NilClass","","NilClass.html","",""],["Object","","Object.html","",""],["OpenStruct","","OpenStruct.html","",""],["Proc","","Proc.html","",""],["Range","","Range.html","",""],["Regexp","","Regexp.html","",""],["String","","String.html","",""],["Symbol","","Symbol.html","",""],["TempFile","","TempFile.html","",""],["Time","","Time.html","",""],["TrueClass","","TrueClass.html","",""],["URI","","URI.html","","<p>URI::Generic must be included towards the  end b/c it runs Object#freeze\nstatically.\n"],["URI::Generic","","URI/Generic.html","",""],["==","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-3D-3D","(ali)","<p>Returns true when <code>ali</code> matches <code>self</code>\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;kimmy&quot;</span>.<span class=\"ruby-identifier\">gibbler</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-string\">&quot;c8027100ecc54945ab15ddac529230e38b1ba6a1&quot;</span>  <span class=\"ruby-comment\"># =&gt; ...</span>\n</pre>\n"],["===","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-3D-3D-3D","(g)","<p>Returns true when <code>g</code> matches one of: <code>self</code>,\n<code>short</code>, <code>shorter</code>, <code>tiny</code>\n\n<pre>&quot;kimmy&quot;.gibbler === &quot;c8027100ecc54945ab15ddac529230e38b1ba6a1&quot; ...</pre>\n"],["__gibbler","Gibbler::Array","Gibbler/Array.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::Complex","Gibbler/Complex.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::DateTime","Gibbler/DateTime.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::File","Gibbler/File.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::Hash","Gibbler/Hash.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::Nil","Gibbler/Nil.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::Object","Gibbler/Object.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self based on:\n<p>Object#class\n<p>Length of Object#name || 0\n"],["__gibbler","Gibbler::Range","Gibbler/Range.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::String","Gibbler/String.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler","Gibbler::Time","Gibbler/Time.html#method-i-__gibbler","(digest_type=nil)","<p>Creates a digest for the current state of self.\n"],["__gibbler_revert!","Array","Array.html#method-i-__gibbler_revert-21","()",""],["__gibbler_revert!","Gibbler::Complex","Gibbler/Complex.html#method-i-__gibbler_revert-21","()",""],["__gibbler_revert!","Hash","Hash.html#method-i-__gibbler_revert-21","()",""],["__gibbler_revert!","String","String.html#method-i-__gibbler_revert-21","()",""],["base","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-base","(base=Gibbler.default_base)",""],["base36","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-base36","()",""],["changed?","Gibbler::Object","Gibbler/Object.html#method-i-changed-3F","()",""],["clear","String","String.html#method-i-clear","()",""],["commit","Gibbler::History","Gibbler/History.html#method-i-commit","()",""],["debug?","Gibbler","Gibbler.html#method-c-debug-3F","()","<p>Returns the current debug status (true or false)\n"],["digest","Gibbler","Gibbler.html#method-i-digest","(*input)",""],["digest","Gibbler","Gibbler.html#method-c-digest","(input, digest_type=nil)","<p>Sends <code>input</code> to Digest::SHA1.hexdigest. If another digest class\nhas been specified, that class will be ...\n"],["digest","Gibbler::Object","Gibbler/Object.html#method-i-digest","(digest_type=nil)",""],["digest_cache","Gibbler::Object","Gibbler/Object.html#method-i-digest_cache","()","<p>The cache is in the Attic.\n"],["digest_fields","Gibbler::Object","Gibbler/Object.html#method-i-digest_fields","()",""],["digest_type","Gibbler","Gibbler.html#method-i-digest_type","()",""],["find_long","Gibbler::History","Gibbler/History.html#method-i-find_long","(*args, &b)",""],["freeze","Gibbler::Object","Gibbler/Object.html#method-i-freeze","()","<p>A simple override on Object#freeze to create a digest before the object is\nfrozen. Once the object is ...\n"],["gibbled?","Gibbler::Object","Gibbler/Object.html#method-i-gibbled-3F","()","<p>Has this object been modified?\n<p>This method compares the return value from digest with the  previous value\n...\n"],["gibbler","Gibbler::Complex","Gibbler/Complex.html#method-c-gibbler","(*fields)",""],["gibbler","Gibbler::Object","Gibbler/Object.html#method-i-gibbler","(digest_type=nil)","<p>Calculates a digest for the current object instance.  Objects that are a\nkind of Hash or Array are processed ...\n"],["gibbler_commit","Gibbler::History","Gibbler/History.html#method-i-gibbler_commit","()","<p>Stores a clone of the current object instance using the current digest\nvalue. If the object was not changed, ...\n"],["gibbler_debug","Gibbler","Gibbler.html#method-c-gibbler_debug","(*args)",""],["gibbler_debug","Gibbler::Object","Gibbler/Object.html#method-i-gibbler_debug","(*args)",""],["gibbler_fields","Gibbler::Complex","Gibbler/Complex.html#method-i-gibbler_fields","()",""],["gibbler_fields","Gibbler::Complex","Gibbler/Complex.html#method-c-gibbler_fields","()",""],["gibbler_fields","Gibbler::Object","Gibbler/Object.html#method-c-gibbler_fields","()",""],["gibbler_fields","Gibbler::Object","Gibbler/Object.html#method-i-gibbler_fields","()",""],["gibbler_find_long","Gibbler::History","Gibbler/History.html#method-i-gibbler_find_long","(g)","<p>Returns the long digest associated to the short digest <code>g</code>. If g\nis longer than 8 characters it returns ...\n"],["gibbler_history","Gibbler::History","Gibbler/History.html#method-i-gibbler_history","(short=false)","<p>Returns an Array of digests in the order they were committed.  If\n<code>short</code> is anything but false, the digests ...\n"],["gibbler_history?","Gibbler::History","Gibbler/History.html#method-i-gibbler_history-3F","()","<p>Does the current object have any history?\n"],["gibbler_object","Gibbler::History","Gibbler/History.html#method-i-gibbler_object","(g=nil)","<p>Returns the object stored under the given digest <code>g</code>. If\n<code>g</code> is not a valid digest, returns nil.\n"],["gibbler_revert!","Gibbler::History","Gibbler/History.html#method-i-gibbler_revert-21","(g=nil)","<p>Revert this object to a previously known state. If called without arguments\nit will revert to the most ...\n"],["gibbler_stamp","Gibbler::History","Gibbler/History.html#method-i-gibbler_stamp","(g=nil)","<p>Returns the timestamp (a Time object) when the digest <code>g</code> was\ncommitted.  If <code>g</code> is not a valid gibble, returns ...\n"],["gibbler_valid?","Gibbler::History","Gibbler/History.html#method-i-gibbler_valid-3F","(g)","<p>Is the given digest <code>g</code> contained in the history for this\nobject?\n"],["history","Gibbler::History","Gibbler/History.html#method-i-history","(*args, &b)",""],["history?","Gibbler::History","Gibbler/History.html#method-i-history-3F","()",""],["included","Gibbler","Gibbler.html#method-c-included","(obj)","<p>Raises an exception. The correct usage is to include a Gibbler::Object:\n<p>Gibbler::Complex\n<p>Gibbler::String ...\n"],["included","Gibbler::Array","Gibbler/Array.html#method-c-included","(obj)",""],["included","Gibbler::Complex","Gibbler/Complex.html#method-c-included","(obj)",""],["included","Gibbler::DateTime","Gibbler/DateTime.html#method-c-included","(obj)",""],["included","Gibbler::File","Gibbler/File.html#method-c-included","(obj)",""],["included","Gibbler::Hash","Gibbler/Hash.html#method-c-included","(obj)",""],["included","Gibbler::Nil","Gibbler/Nil.html#method-c-included","(obj)",""],["included","Gibbler::Object","Gibbler/Object.html#method-c-included","(obj)",""],["included","Gibbler::Range","Gibbler/Range.html#method-c-included","(obj)",""],["included","Gibbler::String","Gibbler/String.html#method-c-included","(obj)",""],["included","Gibbler::Time","Gibbler/Time.html#method-c-included","(obj)",""],["inherited","Gibbler::Complex","Gibbler/Complex.html#method-c-inherited","(obj)",""],["load_config","Gibbler::VERSION","Gibbler/VERSION.html#method-c-load_config","()",""],["message","Gibbler::BadDigest","Gibbler/BadDigest.html#method-i-message","()",""],["message","Gibbler::NoHistory","Gibbler/NoHistory.html#method-i-message","()",""],["message","Gibbler::NoRevert","Gibbler/NoRevert.html#method-i-message","()",""],["mutex","Gibbler::History","Gibbler/History.html#method-c-mutex","()",""],["new","Gibbler","Gibbler.html#method-c-new","(*input)","<p>Creates a digest from the given <code>input</code>. See Gibbler.digest.\n<p>If only one argument is given and it's a digest, ...\n"],["new","Gibbler::Error","Gibbler/Error.html#method-c-new","(obj)",""],["object","Gibbler::History","Gibbler/History.html#method-i-object","(*args, &b)",""],["revert!","Gibbler::History","Gibbler/History.html#method-i-revert-21","(*args, &b)",""],["short","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-short","()","<p>Returns the first 8 characters of itself (the digest).\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;kimmy&quot;</span>.<span class=\"ruby-identifier\">gibbler</span>         <span class=\"ruby-comment\"># =&gt; c8027100ecc54945ab15ddac529230e38b1ba6a1 ...</span>\n</pre>\n"],["shorten","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-shorten","(len=20)","<p>Shorten the digest to the given (optional) length.\n"],["shorter","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-shorter","()","<p>Returns the first 6 characters of itself (the digest).\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;kimmy&quot;</span>.<span class=\"ruby-identifier\">gibbler</span>         <span class=\"ruby-comment\"># =&gt; c8027100ecc54945ab15ddac529230e38b1ba6a1 ...</span>\n</pre>\n"],["stamp","Gibbler::History","Gibbler/History.html#method-i-stamp","(*args, &b)",""],["tiny","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-tiny","()","<p>Returns the first 4 characters of itself (the digest).\n<p>e.g.\n\n<pre class=\"ruby\"><span class=\"ruby-string\">&quot;kimmy&quot;</span>.<span class=\"ruby-identifier\">gibbler</span>         <span class=\"ruby-comment\"># =&gt; c8027100ecc54945ab15ddac529230e38b1ba6a1 ...</span>\n</pre>\n"],["to_i","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-to_i","(base=nil)","<p>Return an integer assuming base is Gibbler.default_base.\n"],["to_s","Gibbler::Digest::InstanceMethods","Gibbler/Digest/InstanceMethods.html#method-i-to_s","(base=nil)","<p>Returns a string. Takes an optional base.\n"],["to_s","Gibbler::VERSION","Gibbler/VERSION.html#method-c-to_s","()",""],["valid?","Gibbler::History","Gibbler/History.html#method-i-valid-3F","(*args, &b)",""],["LICENSE","","LICENSE_txt.html","","<p>Copyright (c) 2009-2012 Solutious Inc, Delano Mandelbaum\n<p>Permission is hereby granted, free of charge, ...\n"],["README","","README_rdoc.html","","<p>Gibbler - v0.9\n<p>Git-like hashes and history for Ruby objects for Ruby 1.8, 1.9 and JRuby.\n<p>Check out the ...\n"]]}}